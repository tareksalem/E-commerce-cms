/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./adminPublic/javascripts/src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./adminPublic/javascripts/controllers/index.js":
/*!******************************************************!*\
  !*** ./adminPublic/javascripts/controllers/index.js ***!
  \******************************************************/
/*! exports provided: renderHomePage, renderOrdersPage, renderMainProductsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderHomePage\", function() { return renderHomePage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderOrdersPage\", function() { return renderOrdersPage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderMainProductsPage\", function() { return renderMainProductsPage; });\n// import {active} from \"../src/behind\";\nconst renderHomePage = (req, res) => {\n    return active.filterContent(\"dashboard-pages\", {\n        element: \"page-container\",\n        fadeOut: 700\n    }, () => {\n        active.render(true, \"/javascripts/view/pages/homepage/view/homeDashboard.js\", \"dashboard-pages\", \"homePage\");\n    });\n};\n\nconst renderOrdersPage = (req, res) => {\n    return active.filterContent(\"dashboard-pages\", {\n        element: \"page-container\",\n        fadeOut: 700\n    }, () => {\n        active.render(true, \"/javascripts/view/pages/ordersPage/view/ordersPage.js\", \"dashboard-pages\", \"ordersPage\");\n    });\n};\n\n//  render main products page\nconst renderMainProductsPage = (req, res) => {\n    active.filterContent(\"dashboard-pages\", {\n        element: \"page-container\",\n        fadeOut: 700\n    }, () => {\n        active.render(true, \"/javascripts/view/pages/productsPage/view/productsPage.js\", \"dashboard-pages\", \"mainProductsPage\");\n    });\n};\n\n\n\n//# sourceURL=webpack:///./adminPublic/javascripts/controllers/index.js?");

/***/ }),

/***/ "./adminPublic/javascripts/lib/active.js":
/*!***********************************************!*\
  !*** ./adminPublic/javascripts/lib/active.js ***!
  \***********************************************/
/*! exports provided: Active */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Active\", function() { return Active; });\n/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router */ \"./adminPublic/javascripts/lib/router.js\");\n\nfunction Active() {\n\n    this.ready = cb => {\n        let loadInterval = setInterval(() => {\n            if (document.readyState == \"complete\") {\n                clearInterval(loadInterval);\n                return cb();\n            }\n        }, 100);\n    };\n    this.whileLoading = (cb, after) => {\n        var i = 0;\n        let loadInterval = setInterval(() => {\n            if (document.readyState == \"complete\") {\n                clearInterval(loadInterval);\n                setTimeout(() => {\n                    if (after) {\n                        return after();\n                    } else {\n                        return true;\n                    }\n                }, 100);\n            } else {\n                i++;\n                if (i === 1) {\n                    return cb();\n                }\n            }\n        }, 1);\n    };\n    // some helpers methods\n    this.helpers = {};\n    this.helpers.checkEmpty = function (element, cb) {\n        elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n        if (elementVal === \"\") {\n            if (!cb) {\n                return true;\n            }\n            if (cb) {\n                var empty = true;\n                return cb(empty);\n            }\n        } else {\n            if (cb) {\n                var empty = false;\n                return cb(empty);\n            } else {\n                return false;\n            }\n        }\n    };\n    this.helpers.checkEmail = function (element, cb) {\n        var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n        var regEx = new RegExp(\"@\", \"gi\");\n        if (elementVal !== \"\") {\n            if (cb) {\n                var test = regEx.test(elementVal);\n                return cb(test);\n            } else {\n                return regEx.test(elementVal);\n            }\n        }\n    };\n    // function to check if it is number\n    this.helpers.checkIsNumber = function (element, cb) {\n        var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n        if (elementVal !== \"\") {\n            var testNumber = Number.isInteger(Number(elementVal));\n            if (cb) {\n                return cb(testNumber);\n            } else {\n                return testNumber;\n            }\n        }\n    };\n\n    // function to check if contains a number\n    this.helpers.checkContainsNumber = function (element, count, cb) {\n        var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n        if (typeof count === \"function\" && !cb) {\n            cb = count;\n        }\n        count = typeof count === \"number\" ? count : 1;\n        var numArr = [];\n        if (elementVal !== \"\") {\n            Array.from(elementVal).forEach(function (letter) {\n                if (Number.isInteger(Number(letter))) {\n                    numArr.push(letter);\n                }\n            });\n            if (numArr.length === count) {\n                let result = true;\n                if (cb) {\n                    return cb(result);\n                } else {\n                    return result;\n                }\n            } else {\n                let result = false;\n                if (cb) {\n                    return cb(result);\n                } else {\n                    return result;\n                }\n            }\n        }\n    };\n\n    // method to make alert and confirm boxes\n    this.dialogs = {};\n    this.dialogs.alert = function (options) {\n        var parentElement = document.createElement(\"container-box\");\n        parentElement.id = \"containerBox\";\n        document.body.appendChild(parentElement);\n        if (options.sound) {\n            let audio = new Audio(options.sound);\n            audio.play();\n        }\n        active.renderComponent(data => {\n            return `\n                <alarm-box>\n                    <style>\n                        container-box#containerBox{\n                            z-index: 1000;\n                            display:block;\n                            width:100%;\n                            height:100%;\n                            position:fixed;\n                            top:0;\n                            bottom:0;\n                            right:0;\n                            left:0;\n                            background: rgba(0, 0, 0, .30);\n                            transition: .5s ease-in-out;\n                        }\n                        alarm-box{\n                            background: #fff;\n                            position: fixed;\n                            z-index: 10000;\n                            width:40%;\n                            right:30%;\n                            top: -100%;\n                            height:auto;\n                            min-height:50px;\n                            padding:10px;\n                            border-radius: 5px;\n                            box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n                            text-align: center;\n                            color:black;\n                            display: block;\n                            overflow:hidden;\n                            margin-top:20px;\n                        }\n                        alarm-box button{\n                            border:none;\n                            outline: none;\n                            background:#2196f3;\n                            color:white;\n                            display:block;\n                            margin: 30px 0 10px 0;\n                            float:right;\n                            border-radius: 5px;\n                            padding:10px;\n                            cursor:pointer;\n                        }\n                        alarm-box button:hover{\n                            background:#0d8aec;\n                            transition: .4s ease-in-out;\n                        }\n                    </style>\n                    ${data.message ? `<h3>${data.message}</h3>` : \"\"}\n                    <button expName=\"closeBtn\">${data.buttonText ? data.buttonText : \"Ok, close\"}</button>\n                </alarm-box>\n            `;\n        }, {\n            render: true,\n            parent: parentElement,\n            data: {\n                message: options.message,\n                buttonText: options.buttonText\n            },\n            name: Math.random().toString(26),\n            animate: {\n                animations: [{\n                    top: \"-100%\"\n                }, {\n                    top: \"0\"\n                }],\n                options: {\n                    duration: 500,\n                    fill: \"forwards\"\n                }\n            }\n        }, component => {\n            let button = component.closeBtn;\n            component.self.style.top = \"unset\";\n            const hideAlert = e => {\n                component.self.animating([{ top: \"0\" }, { top: \"-100%\" }], {\n                    duration: 500,\n                    fill: \"forwards\"\n                }, function () {\n                    active.removeComponent(component.name);\n                    parentElement.removeThis();\n                });\n            };\n            button.addEvent(\"click\", hideAlert);\n            var keyDownHandler = e => {\n                if (e.keyCode === 13) {\n                    return hideAlert(e);\n                }\n            };\n            document.addEventListener(\"keydown\", keyDownHandler);\n        });\n    };\n    this.dialogs.confirm = (options, cb) => {\n        var parentElement = document.createElement(\"container-box\");\n        parentElement.id = \"containerBox\";\n        document.body.appendChild(parentElement);\n\n        if (options.sound) {\n            let audio = new Audio(options.sound);\n            audio.play();\n        }\n        active.renderComponent(data => {\n            return `\n                <confirm-box>\n                    <style>\n                        container-box#containerBox{\n                            z-index: 1000;\n                            display:block;\n                            width:100%;\n                            height:100%;\n                            position:fixed;\n                            top:0;\n                            bottom:0;\n                            right:0;\n                            left:0;\n                            background: rgba(0, 0, 0, .30);\n                            transition: .5s ease-in-out;\n                        }\n                        confirm-box{\n                            background: #fff;\n                            position: fixed;\n                            z-index: 10000;\n                            width:40%;\n                            right:30%;\n                            top: -100%;\n                            height:auto;\n                            min-height:50px;\n                            padding:10px;\n                            border-radius: 5px;\n                            box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n                            text-align: center;\n                            color:black;\n                            display: block;\n                            overflow:hidden;\n                            margin-top:20px;\n                        }\n                        confirm-box button{\n                            border:none;\n                            outline: none;\n                            background:#2196f3;\n                            color:white;\n                            display:block;\n                            margin: 30px 0 10px 0;\n                            border-radius: 5px;\n                            padding:10px;\n                            cursor:pointer;\n                        }\n                        confirm-box button:hover{\n                            background:#0d8aec;\n                            transition: .4s ease-in-out;\n                        }\n                        confirm-box .confirm-yes-btn{\n                            float:right;\n                        }\n                        confirm-box .confirm-no-btn{\n                            float:left;\n                        }\n                    </style>\n                    ${data.message ? `<h3>${data.message}</h3>` : \"\"}\n                    <button class=\"confirm-yes-btn\" expName=\"yes\">Yes</button>\n                    <button class=\"confirm-no-btn\" expName=\"no\">No</button>\n                </confirm-box>\n            `;\n        }, {\n            render: true,\n            parent: parentElement,\n            data: {\n                message: options.message\n            },\n            name: Math.random().toString(26),\n            animate: {\n                animations: [{\n                    top: \"-100%\"\n                }, {\n                    top: \"0\"\n                }],\n                options: {\n                    duration: 500,\n                    fill: \"forwards\"\n                }\n            }\n        }, component => {\n            let yes = component.yes;\n            let no = component.no;\n            component.self.style.top = \"unset\";\n\n            const hideConfirm = e => {\n                component.self.animating([{ top: \"0\" }, { top: \"-100%\" }], {\n                    duration: 500,\n                    fill: \"forwards\"\n                }, function () {\n                    active.removeComponent(component.name);\n                    parentElement.removeThis();\n                    if (e.target === yes) {\n                        return cb(true);\n                    } else if (e.target === no) {\n                        return cb(false);\n                    }\n                });\n            };\n            yes.addEvent(\"click\", hideConfirm);\n            no.addEvent(\"click\", hideConfirm);\n        });\n    };\n    // prompt dialog\n    this.dialogs.prompt = (options, cb) => {\n        var parentElement = document.createElement(\"container-box\");\n        parentElement.id = \"containerBox\";\n        document.body.appendChild(parentElement);\n        if (options.sound) {\n            let audio = new Audio(options.sound);\n            audio.play();\n        }\n        active.renderComponent(data => {\n            return `\n                <prompt-box>\n                    <style>\n                        container-box#containerBox{\n                            z-index: 1000;\n                            display:block;\n                            width:100%;\n                            height:100%;\n                            position:fixed;\n                            top:0;\n                            bottom:0;\n                            right:0;\n                            left:0;\n                            background: rgba(0, 0, 0, .30);\n                            transition: .5s ease-in-out;\n                        }\n                        prompt-box{\n                            background: #fff;\n                            position: fixed;\n                            z-index: 10000;\n                            width:40%;\n                            right:30%;\n                            top: -100%;\n                            height:auto;\n                            min-height:50px;\n                            padding:10px;\n                            border-radius: 5px;\n                            box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);\n                            text-align: center;\n                            color:black;\n                            display: block;\n                            overflow:hidden;\n                            margin-top:20px;\n                        }\n                        prompt-box button{\n                            border:none;\n                            outline: none;\n                            background:#2196f3;\n                            color:white;\n                            display:block;\n                            margin: 30px 0 10px 0;\n                            border-radius: 5px;\n                            padding:10px;\n                            cursor:pointer;\n                        }\n                        prompt-box button:hover{\n                            background:#0d8aec;\n                            transition: .4s ease-in-out;\n                        }\n                        prompt-box .confirm-yes-btn{\n                            float:right;\n                        }\n                        prompt-box .confirm-no-btn{\n                            float:left;\n                        }\n                        prompt-box input{\n                            border:none;\n                            outline: none;\n                            padding:10px;\n                            display: block;\n                            margin:10px auto 10px auto;\n                            border-bottom:1px solid black;\n                            color:black;\n                        }\n                    </style>\n                    ${data.message ? `<h3>${data.message}</h3>` : \"\"}\n                    <input expName=\"promptInput\" placeholder=\"write here\" type=\"text\"/>\n                    <button class=\"confirm-yes-btn\" expName=\"submit\">submit</button>\n                    <button class=\"confirm-no-btn\" expName=\"close\">close</button>\n                </confirm-box>\n            `;\n        }, {\n            render: true,\n            parent: parentElement,\n            data: {\n                message: options.message\n            },\n            name: Math.random().toString(26),\n            animate: {\n                animations: [{\n                    top: \"-100%\"\n                }, {\n                    top: \"0\"\n                }],\n                options: {\n                    duration: 500,\n                    fill: \"forwards\"\n                }\n            }\n        }, component => {\n            let submit = component.submit;\n            let close = component.close;\n            component.self.style.top = \"unset\";\n            const hidePrompt = (e, callback) => {\n                component.self.animating([{ top: \"0\" }, { top: \"-100%\" }], {\n                    duration: 500,\n                    fill: \"forwards\"\n                }, function () {\n                    active.removeComponent(component.name);\n                    parentElement.removeThis();\n                    if (e.target === submit) {\n                        // grape the value of input\n                        let promptInput = component.promptInput;\n                        if (promptInput.value.length === 0) {\n                            return cb(false);\n                        } else {\n                            return cb(promptInput.value);\n                        }\n                    } else if (e.target === close) {\n                        return cb(false);\n                    } else if (e.keyCode == 13) {\n                        let promptInput = component.promptInput;\n                        if (promptInput.value.length === 0) {\n                            cb(false);\n                            return callback();\n                        } else {\n                            cb(promptInput.value);\n                            return callback();\n                        }\n                    }\n                });\n            };\n            submit.addEvent(\"click\", hidePrompt);\n            close.addEvent(\"click\", hidePrompt);\n            var keyDownHandler = e => {\n                if (e.keyCode === 13) {\n                    hidePrompt(e, () => {\n                        document.removeEvent(\"keydown\", keyDownHandler, false);\n                    });\n                }\n            };\n            let promptInput = component.promptInput;\n            promptInput.addEvent(\"focus\", function (e) {\n                document.addEventListener(\"keydown\", keyDownHandler);\n            });\n        });\n    };\n    // method to upload a file\n    this.uploadFile = (fileInput, dataInput) => {\n        var file = typeof fileInput == \"string\" ? document.querySelector(fileInput) : fileInput;\n        var fileDataInput = dataInput ? typeof dataInput === \"string\" ? document.querySelector(dataInput) : typeof dataInput === \"function\" ? dataInput : typeof dataInput == \"object\" ? dataInput : false : false;\n        function setFileInfo(fileData, filesData, filesDataArray) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(fileData);\n            let nameArr = fileData.name.split(\".\");\n            let extName = nameArr.length - 1;\n            extName = \".\" + nameArr[extName];\n            var fileInfo = {\n                fileName: fileData.name,\n                size: fileData.size,\n                type: fileData.type,\n                extName: extName\n            };\n            fileReader.addEventListener(\"load\", function () {\n                var result = fileReader.result;\n                result = result.substring(result.indexOf(',') + 1);\n                fileInfo.result = result;\n                fileInfo.binary = fileReader.result;\n                filesDataArray.push(fileInfo);\n                if (filesData.length === filesDataArray.length) {\n                    filesDataArray = filesDataArray.length === 1 ? filesDataArray[0] : filesDataArray;\n                    if (fileDataInput && typeof fileDataInput == \"object\") {\n                        return fileDataInput.value = JSON.stringify(filesDataArray);\n                    } else if (typeof dataInput === \"function\") {\n                        return dataInput(filesDataArray);\n                    } else if (!dataInput) {\n                        return filesDataArray;\n                    }\n                }\n            });\n        }\n        file.addEventListener(\"change\", function (e) {\n            var filesDataArray = [];\n            var filesData = file.files;\n            for (let i = 0; i < filesData.length; i++) {\n                setFileInfo(filesData[i], filesData, filesDataArray);\n                // var fileData = filesData[i];\n            }\n        });\n    };\n\n    // localStorage methods\n    this.storage = {\n        setItemAsync: function (key, data, returning = true) {\n            return new Promise(function (resolved, rejected) {\n                data = typeof data === \"object\" ? JSON.stringify(data) : data;\n                try {\n                    localStorage.setItem(key, data);\n                    var item;\n                    if (returning === true) {\n                        item = localStorage.getItem(key);\n                        return resolved(item);\n                    } else {\n                        return resolved();\n                    }\n                } catch (error) {\n                    return rejected(error);\n                }\n            });\n        },\n        getItemAsync: function (key) {\n            return new Promise(function (resolved, rejected) {\n                if (localStorage.getItem(key) === null) {\n                    return rejected(new Error(\"not found item\"));\n                } else {\n                    let item = localStorage.getItem(key);\n                    return resolved(item);\n                }\n            });\n        },\n        setItem: function (key, data) {\n            data = typeof data === \"object\" ? JSON.stringify(data) : data;\n            localStorage.setItem(key, data);\n        },\n        getItem: function (key) {\n            return localStorage.getItem(key);\n        }\n\n        // function for making a promises\n\n\n    };var route;\n    // global variables\n    var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame;\n\n    // function to check if the obkect is empty\n    Object.prototype.issEmpty = function () {\n        if (this && typeof this === \"object\") {\n            if (Array.from(Object.keys(this)).length === 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    };\n    this.removeComponent = function (componentName) {\n        if (componentName) {\n            let component = this.getComponent(componentName);\n            if (component) {\n                let componentIndex = DomComponents.indexOf(component.name);\n                DomComponents.splice(componentIndex, 1);\n                component.self.removeThis();\n            }\n        }\n    };\n    HTMLElement.prototype.removeThis = function () {\n        if (this.parentNode) {\n            if (this.parentNode.hasChildNodes(this)) {\n                this.parentNode.removeChild(this);\n                // if (this.parentElement.hasChildNodes(this)) {\n                //     this.parentElement.removeChild(this);\n                // }\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    };\n    Element.prototype.appendElements = function (content) {\n        if (typeof content === \"object\") {\n            return this.appendChild(content);\n        } else if (typeof content === \"string\") {\n            // var container = document.createElement(\"div\");\n            // container.innerHTML = content;\n            return this.insertAdjacentHTML(\"beforeEnd\", content);\n        }\n    };\n    Element.prototype.reset = function () {\n        if (this.tagName === \"FORM\") {\n            Array.from(this.querySelectorAll(\"input\")).forEach(input => {\n                if (input.getAttribute(\"type\") !== \"submit\") {\n                    input.value = \"\";\n                }\n            });\n        } else if (this.tagName === \"INPUT\") {\n            this.value = \"\";\n        }\n    };\n    // get the parents of element\n    Element.prototype.parents = function (parent) {\n        var element = this;\n        var els = [];\n        while (element) {\n            els.unshift(element);\n            element = element.parentNode;\n        }\n        if (parent === undefined) {\n            return els;\n        } else {\n            parent = typeof parent === \"string\" ? document.querySelectorAll(parent) : parent;\n            if (parent.length > 0) {\n                var par = [];\n                parent.forEach(function (paren) {\n                    els.forEach(function (el) {\n                        if (el === paren) {\n                            par.push(paren);\n                        }\n                    });\n                });\n                return par[0];\n            } else {\n                var par = [];\n                els.forEach(function (el) {\n                    if (el === parent) {\n                        par.push(parent);\n                    }\n                });\n                return par[0];\n            }\n        }\n    };\n    Element.prototype.insertAfter = function (element) {\n        if (typeof element === \"string\") {\n            this.insertAdjacentHTML(\"afterend\", element);\n        } else if (typeof element === \"object\") {\n            this.parentNode.insertBefore(element, this.nextSibling);\n        }\n    };\n    // array of dom components\n    this.DomComponents = [];\n    const DomComponents = this.DomComponents;\n    //global variable\n    var active = this;\n\n    //functions to get the current params of location\n    var params = {};\n    window.location.search.substring(1).split('&').forEach(function (pair) {\n        pair = pair.split('=');\n        if (pair[1] !== undefined) {\n            var key = decodeURIComponent(pair[0]),\n                val = decodeURIComponent(pair[1]),\n                val = val ? val.replace(/\\++/g, ' ').trim() : '';\n\n            if (key.length === 0) {\n                return;\n            }\n            if (params[key] === undefined) {\n                params[key] = val;\n            } else {\n                if (\"function\" !== typeof params[key].push) {\n                    params[key] = [params[key]];\n                }\n                params[key].push(val);\n            }\n        }\n    });\n    window.location.params = params;\n    // end functions to get the current params of location\n\n    //function to get a component from dom components array\n    this.getComponent = function (name) {\n        var components = [];\n        DomComponents.forEach(function (component) {\n            if (component.name === name) {\n                components.push(component);\n            } else {\n                return component;\n            }\n        });\n        if (components.length === 1) {\n            return components[0];\n        } else if (components.length > 1) {\n            return components[0];\n        }\n    };\n    //end function to get a component from dom components array\n\n    //function to refresh a component\n    this.refreshComponent = function (component) {\n        active.removeComponent(component.name);\n        active.filterContent(component.parent, () => {\n            this.renderComponent(component.cb, component.options, component.finish);\n        });\n    };\n    //end function to refresh a component\n\n    document.liveEvent = function (event, target, cb, option) {\n        document.addEventListener(event, function (e) {\n            // check if the type of target is string # Means Element\n            if (typeof target == \"string\") {\n                var targetElements = document.querySelectorAll(target);\n                var targetElement = Array.from(targetElements).find(el => {\n                    return el == e.target;\n                });\n                if (targetElement) {\n                    return cb(e);\n                } else {\n                    return null;\n                }\n            }\n        }, option ? option : false);\n    };\n    //functions of dome events\n\n    Element.prototype.getSiblings = function () {\n        let elem = this;\n        if (Array.isArray(elem)) {\n            Array.from(elem).forEach(elm => {\n                let siblings = [];\n                var sibling = elem.parentNode.firstChild;\n                var skipMe = elm;\n                for (; sibling; sibling = sibling.nextSibling) {\n                    if (sibling.nodeType == 1 && sibling != skipMe) {\n                        siblings.push(sibling);\n                        return siblings;\n                    }\n                }\n            });\n        } else {\n            var siblings = [];\n            var sibling = elem.parentNode.firstChild;\n            var skipMe = elem;\n            for (; sibling; sibling = sibling.nextSibling) {\n                if (sibling.nodeType == 1 && sibling != skipMe) {\n                    siblings.push(sibling);\n                    return siblings;\n                }\n            }\n        }\n    };\n    /*function to make an events of the dom with on event*/\n    Object.prototype.addEvent = function (event, cb, option) {\n        let self = this;\n        if (self) {\n            if (self.length !== undefined && self.length > 0) {\n                try {\n                    Array.from(self).forEach(elem => {\n                        if (typeof elem == \"object\" && \"nodeType\" in elem && elem.nodeType === 1 && elem.cloneNode) {\n                            try {\n                                elem.addEventListener(event, e => {\n                                    return cb(e, elem);\n                                }, option ? option : true);\n                            } catch (e) {\n                                return true;\n                            }\n                        }\n                    });\n                } catch (e) {\n                    return true;\n                }\n            } else {\n                try {\n                    self.addEventListener(event, e => {\n                        return cb(e, self);\n                    }, option ? option : true);\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n    };\n\n    HTMLElement.prototype.addEvent = function (event, cb, option) {\n        let self = this;\n        try {\n            self.addEventListener(`${event}`, e => {\n                return cb(e, self);\n            }, option ? option : true);\n        } catch (e) {\n            return true;\n        }\n    };\n    Object.prototype.removeEvent = function (event, cb, option) {\n        let self = this;\n        if (self) {\n            if (self.length !== undefined && self.length > 0) {\n                try {\n                    self.forEach(elem => {\n                        if (typeof elem == \"object\" && \"nodeType\" in elem && elem.nodeType === 1 && elem.cloneNode) {\n                            try {\n                                elem.removeEventListener(event, e => {\n                                    return cb(e, elem);\n                                }, option ? option : true);\n                            } catch (e) {\n                                return true;\n                            }\n                        }\n                    });\n                } catch (e) {\n                    return true;\n                }\n            } else {\n                try {\n                    self.removeEventListener(event, e => {\n                        return cb(e, self);\n                    }, option ? option : true);\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n    };\n    /*function to make an events of the dom with on event*/\n    HTMLElement.prototype.removeEvent = (event, cb, option) => {\n        var self = this;\n        try {\n            self.removeEventListener(event, e => {\n                return cb(e, self);\n            }, option ? option : true);\n        } catch (e) {\n            return true;\n        }\n    };\n    /*function to make toggle click of a specific element, it returns a two callback the first one for the first click and the second callback for the second click*/\n\n    Object.prototype.toggleClick = function (cb1, cb2) {\n        var trgetElem = this;\n        var clicked = 0;\n        if (cb1 && cb2) {\n            try {\n                if (trgetElem.length > 1) {\n                    Array.from(trgetElem).forEach(function (el, i) {\n                        el.addEventListener(\"click\", function (event) {\n                            clicked++;\n                            if (clicked === 1) {\n                                return cb1(event);\n                            } else if (clicked === 2) {\n                                cb2(event);\n                                return clicked = 0;\n                            }\n                        });\n                    });\n                } else if (trgetElem.length === 1) {\n                    trgetElem.addEventListener(\"click\", function (event) {\n                        clicked++;\n                        if (clicked === 1) {\n                            return cb1(event);\n                        } else if (clicked === 2) {\n                            cb2(event);\n                            return clicked = 0;\n                        }\n                    });\n                }\n            } catch (e) {\n                return true;\n            }\n        }\n    };\n    HTMLElement.prototype.toggleClick = (cb1, cb2) => {\n        let trgetElem = this;\n        let clicked = 0;\n        trgetElem.addEventListener(\"click\", function (event) {\n            clicked++;\n            if (clicked === 1) {\n                return cb1(event);\n            } else if (clicked === 2) {\n                cb2(event);\n                return clicked = 0;\n            }\n        });\n    };\n    //end toggle click function\n\n    /*function to make toggle hover of a specific element, it returns a two callback the first one for the first hover and the second callback for the second hover*/\n\n    Object.prototype.toggleHover = function (cb1, cb2) {\n        var trgetElem = this;\n        if (cb1 && cb2) {\n            try {\n                if (trgetElem.length > 1) {\n                    Array.from(trgetElem).forEach(function (el, i) {\n                        el.addEventListener(\"mouseenter\", function (event) {\n                            return cb1(event);\n                        });\n                        el.addEventListener(\"mouseleave\", function (event) {\n                            return cb2(event);\n                        });\n                    });\n                } else if (trgetElem.length === 1) {\n                    trgetElem.addEventListener(\"mouseenter\", function (event) {\n                        return cb1(event);\n                    });\n                    trgetElem.addEventListener(\"mouseleave\", function (event) {\n                        return cb2(event);\n                    });\n                }\n            } catch (e) {\n                return true;\n            }\n        }\n    };\n    HTMLElement.prototype.toggleHover = (cb1, cb2) => {\n        let trgetElem = this;\n        trgetElem.addEventListener(\"mouseenter\", function (event) {\n            return cb1(event);\n        });\n        trgetElem.addEventListener(\"mouseleave\", function (event) {\n            return cb2(event);\n        });\n    };\n    //end toggle hover function\n\n    //end functions of dom events\n\n    // animation functions\n\n    // slidedown function\n\n    HTMLElement.prototype.slideDown = function (time, display, cb) {\n        var element = this;\n        window.onload = function () {\n            makeSliding(element);\n        };\n        function makeSliding(element) {\n            if (element) {\n                var displayStatus = getComputedStyle(element, null).getPropertyValue(\"display\") || element.style.display;\n                if (typeof display === \"function\") {\n                    cb = display;\n                }\n                if (displayStatus === \"none\" || displayStatus === \"\") {\n                    element.style.display = display && typeof display === \"string\" ? display : \"block\";\n                    var originalHeight = getComputedStyle(element).getPropertyValue(\"height\") || element.style.height || element.offsetHeight;\n                    var splitHeight = parseInt(originalHeight);\n                    var typeHeight = originalHeight.split(splitHeight)[1];\n\n                    var currentHeight = 0;\n                    if (originalHeight.match(/px/gi)) {\n                        element.style.height = currentHeight + \"px\";\n                    } else if (originalHeight.match(/%/gi)) {\n                        element.style.height = currentHeight + \"%\";\n                    }\n                    currentTime = splitHeight / (time / 10);\n                    var animate = function () {\n                        currentHeight += currentTime;\n                        if (originalHeight.match(/px/gi)) {\n                            element.style.height = currentHeight + \"px\";\n                        } else if (originalHeight.match(/%/gi)) {\n                            element.style.height = currentHeight / 10 + \"%\";\n                        } else if (originalHeight.match(/auto/gi)) {\n                            element.style.height = currentHeight + \"auto\";\n                        }\n                        if (element.style.height === originalHeight) {\n                            cancelAnimationFrame(animate);\n                            element.style.height = originalHeight;\n                        } else {\n                            requestAnimationFrame && requestAnimationFrame(animate);\n                        }\n                    };\n                    animate();\n                }\n                if (cb) {\n                    setTimeout(function () {\n                        return cb(element);\n                    }, time);\n                }\n            }\n        }\n        if (document.readyState === \"complete\") {\n            makeSliding(element);\n        }\n    };\n\n    //end slide down function\n\n    // slideup function\n\n    HTMLElement.prototype.slidingUp = function (time, cb) {\n        var element = this;\n        if (element) {\n            var originalHeight = getComputedStyle(element).getPropertyValue(\"height\") || element.style.height;\n            var displayStatus = getComputedStyle(element).getPropertyValue(\"display\") || element.style.display;\n            var splitHeight = parseInt(originalHeight);\n            var typeHeight = originalHeight.split(splitHeight)[1];\n            var currentHeight = Number.parseInt(originalHeight);\n            if (displayStatus !== \"none\") {\n                currentTime = splitHeight / (time / 10);\n                var animate = function () {\n                    currentHeight -= currentTime;\n                    element.style.height = currentHeight + typeHeight;\n                    if (currentHeight <= 0) {\n                        cancelAnimationFrame(animate);\n                        element.style.display = \"none\";\n                        element.style.height = originalHeight;\n                    } else {\n                        requestAnimationFrame(animate);\n                    }\n                };\n                requestAnimationFrame(animate);\n            }\n\n            if (cb) {\n                setTimeout(function () {\n                    return cb(element);\n                }, time);\n            }\n        }\n    };\n\n    //end slide up function\n\n    // function for fade toggle\n\n\n    HTMLElement.prototype.fadeToggle = function (duration, displayTo, cb) {\n        var element = this;\n        if (!displayTo || typeof displayTo === \"function\") {\n            displayTo = \"block\";\n        }\n        if (typeof displayTo === \"function\") {\n            cb = displayTo;\n        }\n        if (getComputedStyle(element).getPropertyValue(\"display\") === \"\" || getComputedStyle(element).getPropertyValue(\"display\") !== \"none\") {\n            element.fadeOut(duration, cb);\n        }\n        if (element.style.opacity < 1) {\n            element.fadeIn(duration, displayTo, cb);\n        } else if (element.style.opacity > 0) {\n            element.fadeOut(duration, cb);\n        }\n    };\n    // end function for fade toggle\n\n    // function for slideToggle\n\n    HTMLElement.prototype.slideToggle = function (duration, displayTo, cb) {\n        var element = this;\n        if (!displayTo || typeof displayTo === \"function\") {\n            displayTo = \"block\";\n        }\n        if (typeof displayTo === \"function\") {\n            cb = displayTo;\n        }\n        if (getComputedStyle(element).getPropertyValue(\"display\") === \"\" || getComputedStyle(element).getPropertyValue(\"display\") !== \"none\") {\n            element.slidingUp(duration, cb);\n        }\n        if (element.style.opacity < 1) {\n            element.slideDown(duration, displayTo, cb);\n        } else if (element.style.opacity > 0) {\n            element.slidingUp(duration, cb);\n        }\n    };\n    // end function for slideToggle\n\n    // fade in function\n    HTMLElement.prototype.fadeIn = function (duration, display, cb) {\n        if (typeof display === \"function\") {\n            cb = display;\n        }\n        var element = this;\n        element.style.opacity = 0;\n        var last = +new Date();\n        var animate = function () {\n            element.style.opacity = +element.style.opacity + (new Date() - last) / duration;\n            last = +new Date();\n            element.style.display = display && typeof display === \"string\" ? display : \"block\";\n            if (+element.style.opacity < 1) {\n                requestAnimationFrame && requestAnimationFrame(animate);\n            } else {\n                window.cancelAnimationFrame(animate);\n                element.style.opacity = 1;\n            }\n        };\n        animate();\n        if (cb) {\n            setTimeout(function () {\n                return cb(element);\n            }, duration);\n        }\n    };\n\n    // fade out function\n    HTMLElement.prototype.fadeOut = function (duration, cb) {\n        var element = this;\n        element.style.opacity = 1;\n        var last = +new Date();\n        var animate = function () {\n            element.style.opacity = +element.style.opacity - (new Date() - last) / duration;\n            last = +new Date();\n            if (+element.style.opacity < 0) {\n                window.cancelAnimationFrame(animate);\n                element.style.display = \"none\";\n                element.style.opacity = 0;\n            } else {\n                requestAnimationFrame && requestAnimationFrame(animate);\n            }\n        };\n        animate();\n        if (cb) {\n            setTimeout(function () {\n                return cb(element);\n            }, duration);\n        }\n    };\n    // end fade out function\n\n    // animating function\n    HTMLElement.prototype.animating = function (boxRotationKeyframes, boxRotationTiming, cb) {\n        this.animate(boxRotationKeyframes, boxRotationTiming).onfinish = function () {\n            if (cb && typeof cb === \"function\") {\n                return cb();\n            }\n        };\n    };\n    // end animating function\n    // function to remove a script\n    this.removeScript = function (path, parent) {\n        parent = typeof parent === \"string\" ? document.querySelector(parent) : parent;\n        let script = parent.querySelector(\"script\");\n        if (script) {\n            script.removeThis();\n        }\n    };\n    //function to require a javascript file\n    this.require = function (path, parent) {\n        var script = document.createElement(\"script\");\n        script.src = path;\n        script.type = \"text/javascript\";\n        if (typeof parent === \"string\") {\n            let ParentElem = document.querySelector(parent);\n            let allScripts = ParentElem.querySelectorAll(\"scripts\");\n            let getScript = Array.from(allScripts).find(scr => {\n                return scr.src === path;\n            });\n            if (getScript) {\n                return null;\n            } else {\n                document.querySelector(parent).appendChild(script);\n            }\n        } else if (typeof parent === \"object\") {\n            let ParentElem = parent;\n            let allScripts = ParentElem.querySelectorAll(\"scripts\");\n            let getScript = Array.from(allScripts).find(scr => {\n                return scr.src === path;\n            });\n            if (getScript) {\n                return null;\n            } else {\n                parent.appendChild(script);\n            }\n        }\n    };\n    //end function to require a javascript file\n\n    // function to render a component and show it in the dom\n\n    this.render = function (status, path, parent, name, cb) {\n        try {\n            parent = typeof parent === \"object\" ? parent : document.querySelector(parent);\n            var script = document.createElement(\"script\");\n            script.src = path;\n            if (name) {\n                script.setAttribute(\"name\", name);\n            }\n            if (status === true) {\n                if (parent.innerHTML === \"\") {\n\n                    parent.appendChild(script);\n                    script.addEventListener(\"load\", function () {\n                        if (cb) {\n                            return cb();\n                        }\n                    });\n                } else {\n                    parent.appendChild(script);\n                    script.addEventListener(\"load\", function () {\n                        if (cb) {\n                            return cb();\n                        }\n                    });\n                }\n            } else {\n                let allScripts = parent.querySelectorAll(\"script\");\n                let getScript = Array.from(allScripts).find(scr => {\n                    return scr.src === path;\n                });\n                if (getScript) {\n                    return null;\n                } else {\n                    parent.appendChild(script);\n                    script.addEventListener(\"load\", function () {\n                        if (cb) {\n                            return cb();\n                        }\n                    });\n                }\n            }\n        } catch (e) {\n            return true;\n        }\n    };\n\n    // end function to render a component and show it in the dom\n\n    // function to filter the parent of component\n\n    this.filterContent = function (element, options, cb) {\n        var parentElement = typeof element === \"string\" ? document.querySelector(element) : element;\n        if (typeof options === \"function\") {\n            cb = options;\n        }\n        if (typeof options == \"object\") {\n            options.element = options.element || parentElement.children[0];\n            if (options.beforeRender) {\n                if (parentElement.innerHTML === \"\") {\n                    options.beforeRender.execute(parentElement);\n                }\n                setTimeout(function () {\n                    parentElement.innerHTML = \"\";\n                    if (typeof cb == \"function\") {\n                        return cb(parentElement);\n                    } else {\n                        return true;\n                    }\n                }, options.beforeRender.duration ? options.beforeRender.duration : 500);\n            } else if (options.element) {\n                var cont = typeof options.element == \"string\" ? parentElement.querySelector(options.element) : options.element;\n                if (cont) {\n                    if (options.fadeOut) {\n                        cont.fadeOut(options.fadeOut, function () {\n                            setTimeout(function () {\n                                parentElement.innerHTML = \"\";\n                                if (typeof cb == \"function\") {\n                                    return cb(parentElement);\n                                } else {\n                                    return true;\n                                }\n                            }, options.fadeOut + 100);\n                        });\n                    }\n                    if (options.slidingUp) {\n                        cont.slidingUp(options.slidingUp);\n                        setTimeout(function () {\n                            parentElement.innerHTML = \"\";\n                            if (typeof cb == \"function\") {\n                                return cb(parentElement);\n                            } else {\n                                return true;\n                            }\n                        }, options.slidingUp + 100);\n                    }\n                    if (options.animate) {\n                        cont.animating(options.animate.animations, options.animate.options);\n                        setTimeout(function () {\n                            parentElement.innerHTML = \"\";\n                            if (typeof cb == \"function\") {\n                                return cb(parentElement);\n                            } else {\n                                return true;\n                            }\n                        }, options.animate.options.duration + 100);\n                    }\n                }\n                if (!cont) {\n                    parentElement.innerHTML = \"\";\n                    if (typeof cb == \"function\") {\n                        return cb(parentElement);\n                    } else {\n                        return true;\n                    }\n                }\n            } else {\n                parentElement.innerHTML = \"\";\n                if (typeof cb == \"function\") {\n                    return cb(parentElement);\n                } else {\n                    return true;\n                }\n            }\n        } else {\n            parentElement.innerHTML = \"\";\n            if (typeof cb == \"function\") {\n                return cb(parentElement);\n            } else {\n                return true;\n            }\n        }\n    };\n\n    // function to filter the parent of component\n\n    //function to loop array inside the component\n\n    this.loopComponent = function (data, cb) {\n        if (typeof data === \"string\") {\n            data = JSON.parse(data);\n        } else if (typeof data == \"number\") {\n            let count = data;\n            data = [];\n            data.length = count;\n        }\n        if (Array.isArray(data)) {\n            return data.map(function (item, i) {\n                return cb(item, i);\n            }).join(\"\");\n        } else if (typeof data === \"object\") {\n            return Object.keys(data).map(function (item, i) {\n                return cb(data[item], data[i]);\n            }).join(\"\");\n        }\n    };\n\n    //end function to loop array inside the component\n\n    // function to render a new component\n    this.renderComponent = function (cb, options, finish) {\n        var parent = typeof options.parent == \"string\" ? document.querySelector(options.parent) : options.parent;\n        if (options.whileLoading) {\n            options.whileLoading(parent);\n        }\n        var renderOption = options.render;\n        var container = document.createElement(\"div\");\n        var animations;\n        var allData;\n        var self = this;\n        var da = Date.now();\n        var testData;\n        function writeIt(data) {\n            testData = data;\n            var newElement = cb(data);\n            container.innerHTML = newElement;\n            if (options && options.scripts) {\n                try {\n                    options.scripts.forEach(function (src) {\n                        if (src.match(/.js$/)) {\n                            var script = document.createElement(\"script\");\n                            script.src = src;\n                            container.firstElementChild.appendChild(script);\n                        }\n                    });\n                } catch (e) {\n                    return true;\n                }\n            }\n            if (options && options.childComponents) {\n                options.childComponents.forEach(childComponent => {\n                    var parentString = childComponent.parent;\n                    let childParent = childComponent.parent;\n                    let component = childComponent.component;\n                    try {\n                        childParent = container.querySelector(childParent);\n                        component.parent = childParent;\n                        component.options.parent = childParent;\n                        component.options.render = true;\n                        active.useComponent(component, childParent);\n                        container.querySelector(parentString).innerHTML = component.stringDom;\n                    } catch (e) {\n                        return null;\n                    }\n                });\n            }\n            if (options && options.style) {\n                var style = options.style;\n                Object.keys(style).forEach(function (el) {\n                    if (el === \"component\") {\n                        var cssElement = container.firstElementChild;\n                        Object.keys(style[el]).forEach(function (objStyle) {\n                            cssElement.style[objStyle] = style[el][objStyle];\n                        });\n                    } else if (el === \"parent\") {\n                        let cssElement = typeof parent == \"string\" ? document.querySelector(parent) : parent;\n                        Object.keys(style[el]).forEach(function (objStyle) {\n                            cssElement.style[objStyle] = style[el][objStyle];\n                        });\n                    } else {\n                        var cssElements = container.firstElementChild.querySelectorAll(el);\n                        cssElements.forEach(function (cssElement) {\n                            Object.keys(style[el]).forEach(function (objStyle) {\n                                cssElement.style[objStyle] = style[el][objStyle];\n                            });\n                        });\n                    }\n                });\n            }\n            function Elements() {\n                this.element = container.firstElementChild.cloneNode(true);\n            }\n            var elements = new Elements();\n            var element = elements.element;\n            if (options && typeof options === \"object\") {\n                if (options.slideDown) {\n                    function makeSlideIn() {\n                        if (!options.slideDown.cb) {\n                            element.slideDown(options.slideDown.duration);\n                        } else if (options.slideDown.cb) {\n                            element.slideDown(options.slideDown.duration, options.slideDown.cb());\n                        }\n                    }\n                    loadCssFile().then(function () {\n                        makeSlideIn();\n                    }).catch(function () {\n                        makeSlideIn();\n                    });\n                }\n                if (options.fadeIn) {\n                    if (!options.fadeIn.cb) {\n                        element.fadeIn(options.fadeIn.duration);\n                    } else if (options.fadeIn.cb) {\n                        element.fadeIn(options.fadeIn.duration, options.fadeIn.cb());\n                    }\n                }\n                if (options.animate) {\n                    element.animating(options.animate.animations, options.animate.options, options.animate.callback ? options.animate.callback : null);\n                }\n            }\n            var component = {};\n            component.finish = finish;\n            component.data = data;\n            component.options = options;\n            component.parent = typeof parent === \"string\" ? document.querySelector(parent) : parent;\n            component.stringDom = cb(data);\n            component.cb = cb;\n            component.self = elements.element;\n            // function to generate a random name for the component\n            function generateRandomName() {\n                var NumberOfWords = 28;\n\n                var words = new BuildArray(NumberOfWords);\n\n                // Use the following variables to \n                // define your random words:\n                words[1] = \"escapology\";\n                words[2] = \"brightwork\";\n                words[3] = \"verkrampte\";\n                words[4] = \"protectrix\";\n                words[5] = \"nudibranch\";\n                words[6] = \"grandchild\";\n                words[7] = \"newfangled\";\n                words[8] = \"flugelhorn\";\n                words[9] = \"mythologer\";\n                words[10] = \"pluperfect\";\n                words[11] = \"jellygraph\";\n                words[12] = \"quickthorn\";\n                words[13] = \"rottweiler\";\n                words[14] = \"technician\";\n                words[15] = \"cowpuncher\";\n                words[16] = \"middlebrow\";\n                words[17] = \"jackhammer\";\n                words[18] = \"triphthong\";\n                words[19] = \"wunderkind\";\n                words[20] = \"dazzlement\";\n                words[21] = \"jabberwock\";\n                words[22] = \"witchcraft\";\n                words[23] = \"pawnbroker\";\n                words[24] = \"thumbprint\";\n                words[25] = \"motorcycle\";\n                words[26] = \"cryptogram\";\n                words[27] = \"torchlight\";\n                words[28] = \"bankruptcy\";\n\n                function BuildArray(size) {\n                    this.length = size;\n                    for (var i = 1; i <= size; i++) {\n                        this[i] = null;\n                    }\n                    return this;\n                }\n                // Generate a random number between 1 and NumberOfWords\n                var rnd = Math.ceil(Math.random() * NumberOfWords);\n                return words[rnd];\n            }\n            component.name = options && options.name ? options.name : generateRandomName();\n            component.id = Math.random().toString(36).substr(2, 9);\n\n            DomComponents.push(component);\n            var countsArr = [];\n            component.update = function () {\n                parent = typeof parent === \"string\" ? document.querySelector(parent) : parent;\n                countsArr.push(parent);\n                if (countsArr.length === 1) {\n                    parent.innerHTML = \"\";\n                    return writeIt(component.data);\n                } else {\n                    return null;\n                }\n            };\n            if (options && options.methods && typeof options.methods === \"object\") {\n                Array.from(Object.keys(options.methods)).forEach(function (el) {\n                    if (el === \"component\") {\n                        element = elements.element;\n                        var methodsEvents = options.methods[el];\n                    } else {\n                        var element = elements.element.querySelector(el);\n                        var matchedElements = [];\n                        if (element == null) {\n                            let allElements = elements.element.querySelectorAll(\"[expName]\");\n                            if (allElements) {\n                                Array.from(allElements).forEach(ele => {\n                                    if (ele.getAttribute(\"expName\") === el) {\n                                        matchedElements.push(ele);\n                                    }\n                                });\n                            } else {}\n                        } else {\n                            matchedElements.push(element);\n                        }\n                        var methodsEvents = options.methods[el];\n                        try {\n                            Array.from(Object.keys(methodsEvents)).forEach(function (event) {\n                                var EventHappen = methodsEvents[event];\n                                Array.from(matchedElements).forEach(function (ele) {\n                                    ele.addEvent(`${event}`, EventHappen);\n                                });\n                            });\n                        } catch (e) {\n                            return true;\n                        }\n                    }\n                });\n            }\n            //function to check about the scripts\n            function checkScripts(resolve, rejected) {\n                if (options && options.scripts && options.scripts.length > 0) {\n                    options.scripts.forEach(function (src) {\n                        if (src.match(/.css$/)) {\n                            var style = document.createElement(\"link\");\n                            style.rel = \"stylesheet\";\n                            style.href = src;\n                            style.as = \"style\";\n                            document.head.appendChild(style);\n                            if (document.head.hasChildNodes(style)) {\n                                return resolve(style);\n                            } else {\n                                return resolve(style);\n                            }\n                        } else {\n                            return rejected();\n                        }\n                    });\n                } else {\n                    return rejected();\n                }\n            }\n            //function to load css files with promises\n            function loadCssFile() {\n                return new Promise(function (resolve, rejected) {\n                    return checkScripts(resolve, rejected);\n                });\n            }\n            // function to auto working for manipulating easy component events\n            (function () {\n                var controllerElements = elements.element.querySelectorAll(\"[event]\");\n                if (controllerElements.length > 0) {\n                    controllerElements.forEach(function (controller) {\n                        var eventType = controller.getAttribute(\"eventType\");\n                        var eventType2 = controller.getAttribute(\"eventType2\");\n                        var thisEventType = controller.getAttribute(\"thisEventType\");\n                        var thisEventType2 = controller.getAttribute(\"thisEventType2\");\n                        var thisEvent = controller.getAttribute(\"thisEvent\");\n                        var notElement = elements.element.querySelector(controller.getAttribute(\"notElement\"));\n                        let compArr = [];\n                        let clicked = 0;\n                        controller.getAttribute(\"targetElement\") === \"component\" ? compArr.push(elements.element) : compArr = [];\n                        var targetElements = controller.getAttribute(\"targetElement\") === \"component\" ? compArr : elements.element.querySelectorAll(controller.getAttribute(\"targetElement\"));\n                        function responseTwo(targetElement) {\n                            var responseType2 = targetElement.getAttribute(\"responseType2\");\n                            if (responseType2) {\n                                if (responseType2 === \"animating\") {\n                                    var animationFrom2 = targetElement.getAttribute(\"animationFrom2\");\n                                    var animationTo2 = targetElement.getAttribute(\"animationTo2\");\n                                    var animationOptions2 = targetElement.getAttribute(\"animationOptions2\");\n                                    var ObjOptions2 = {};\n                                    var animationOptionsArr2 = animationOptions2.split(\",\");\n                                    animationOptionsArr2.forEach(function (option) {\n                                        var splitedOption2 = option.split(\":\");\n                                        ObjOptions2[splitedOption2[0]] = splitedOption2[1];\n                                    });\n                                    if (ObjOptions2.duration) {\n                                        ObjOptions2.duration = Number.parseInt(ObjOptions2.duration);\n                                    }\n                                    var fromArray2 = animationFrom2.split(\",\");\n                                    var toArray2 = animationTo2.split(\",\");\n                                    var ObjectFrom2 = {};\n                                    var ObjectTo2 = {};\n                                    fromArray2.forEach(function (fromAn, i) {\n                                        var splitedFrom2 = fromAn.split(\":\");\n                                        var splitedTo2 = toArray2[i].split(\":\");\n                                        ObjectFrom2[splitedFrom2[0]] = splitedFrom2[1];\n                                        ObjectTo2[splitedTo2[0]] = splitedTo2[1];\n                                    });\n                                    targetElement.animating([ObjectFrom2, ObjectTo2], ObjOptions2);\n                                } else if (responseType2 === \"display\") {\n                                    var display2 = targetElement.getAttribute(\"display2\");\n                                    targetElement.style.display = display2;\n                                } else if (responseType2 === \"slideUp\") {\n                                    let slideUpDuration = Number.parseInt(targetElement.getAttribute(\"slideUpDuration\"));\n                                    targetElement.slidingUp(slideUpDuration);\n                                } else if (responseType2 === \"slideDown\") {\n                                    let duration = Number.parseInt(targetElement.getAttribute(\"slideDuration\"));\n                                    let slideDisplay = targetElement.getAttribute(\"slideDisplay\");\n                                    targetElement.slideDown(duration, slideDisplay);\n                                } else if (responseType2 === \"fadeIn\") {\n                                    let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                    let fadeDisplay = targetElement.getAttribute(\"fadeDisplay\");\n                                    fadeDisplay = fadeDisplay !== undefined ? fadeDisplay : \"block\";\n                                    targetElement.fadeIn(fadeDuration, fadeDisplay);\n                                } else if (responseType2 === \"fadeOut\") {\n                                    let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                    targetElement.fadeIn(fadeDuration);\n                                } else {\n                                    var responseDuration2 = targetElement.getAttribute(\"duration\");\n                                    targetElement[responseType2](Number.parseInt(responseDuration2));\n                                }\n                            }\n                        }\n                        function responseOne(targetElement) {\n                            var responseType = targetElement.getAttribute(\"responseType\");\n                            if (responseType === \"animating\") {\n                                var animationFrom = targetElement.getAttribute(\"animationFrom\");\n                                var animationTo = targetElement.getAttribute(\"animationTo\");\n                                var animationOptions = targetElement.getAttribute(\"animationOptions\");\n                                var ObjOptions = {};\n                                var animationOptionsArr = animationOptions.split(\",\");\n                                animationOptionsArr.forEach(function (option) {\n                                    var splitedOption = option.split(\":\");\n                                    ObjOptions[splitedOption[0]] = splitedOption[1];\n                                });\n                                if (ObjOptions.duration) {\n                                    ObjOptions.duration = Number.parseInt(ObjOptions.duration);\n                                }\n                                var fromArray = animationFrom.split(\",\");\n                                var toArray = animationTo.split(\",\");\n                                var ObjectFrom = {};\n                                var ObjectTo = {};\n                                fromArray.forEach(function (fromAn, i) {\n                                    var splitedFrom = fromAn.split(\":\");\n                                    var splitedTo = toArray[i].split(\":\");\n                                    ObjectFrom[splitedFrom[0]] = splitedFrom[1];\n                                    ObjectTo[splitedTo[0]] = splitedTo[1];\n                                });\n\n                                targetElement.animating([ObjectFrom, ObjectTo], ObjOptions);\n                            } else if (responseType === \"display\") {\n                                var display1 = targetElement.getAttribute(\"display1\");\n                                targetElement.style.display = display1;\n                            } else if (responseType === \"cssStyle\") {\n                                var css = targetElement.getAttribute(\"css\");\n                                targetElement.style.cssText += css;\n                            } else if (responseType === \"slideDown\") {\n                                let duration = Number.parseInt(targetElement.getAttribute(\"slideDuration\"));\n                                let slideDisplay = targetElement.getAttribute(\"slideDisplay\");\n                                targetElement.slideDown(duration, slideDisplay);\n                            } else if (responseType === \"slideUp\") {\n                                let slideUpDuration = Number.parseInt(targetElement.getAttribute(\"slideUpDuration\"));\n                                targetElement.slidingUp(slideUpDuration);\n                            } else if (responseType === \"fadeIn\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                let fadeDisplay = targetElement.getAttribute(\"fadeDisplay\");\n                                fadeDisplay = fadeDisplay !== undefined ? fadeDisplay : \"block\";\n                                targetElement.fadeIn(fadeDuration, fadeDisplay);\n                            } else if (responseType === \"fadeOut\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                targetElement.fadeIn(fadeDuration);\n                            }\n                        }\n\n                        // function to make response one function to this element\n                        function responseThisOne(targetElement) {\n                            var thisResponseType = targetElement.getAttribute(\"thisResponseType\");\n                            if (thisResponseType === \"animating\") {\n                                var thisAnimationFrom = targetElement.getAttribute(\"thisAnimationFrom\");\n                                var thisAnimationTo = targetElement.getAttribute(\"thisAnimationTo\");\n                                var thisAnimationOptions = targetElement.getAttribute(\"thisAnimationOptions\");\n                                var ObjOptions = {};\n                                var animationOptionsArr = thisAnimationOptions.split(\",\");\n                                animationOptionsArr.forEach(function (option) {\n                                    var splitedOption = option.split(\":\");\n                                    ObjOptions[splitedOption[0]] = splitedOption[1];\n                                });\n                                if (ObjOptions.duration) {\n                                    ObjOptions.duration = Number.parseInt(ObjOptions.duration);\n                                }\n                                var fromArray = thisAnimationFrom.split(\",\");\n                                var toArray = thisAnimationTo.split(\",\");\n                                var ObjectFrom = {};\n                                var ObjectTo = {};\n                                fromArray.forEach(function (fromAn, i) {\n                                    var splitedFrom = fromAn.split(\":\");\n                                    var splitedTo = toArray[i].split(\":\");\n                                    ObjectFrom[splitedFrom[0]] = splitedFrom[1];\n                                    ObjectTo[splitedTo[0]] = splitedTo[1];\n                                });\n\n                                targetElement.animating([ObjectFrom, ObjectTo], ObjOptions);\n                            } else if (thisResponseType === \"display\") {\n                                var thisDisplay1 = targetElement.getAttribute(\"thisDisplay1\");\n                                targetElement.style.display = thisDisplay1;\n                            } else if (thisResponseType === \"cssStyle\") {\n                                var css = targetElement.getAttribute(\"thisCss\");\n                                targetElement.style.cssText += css;\n                            } else if (thisResponseType === \"slideUp\") {\n                                let slideUpDuration = Number.parseInt(targetElement.getAttribute(\"slideUpDuration\"));\n                                targetElement.slidingUp(slideUpDuration);\n                            } else if (thisResponseType === \"slideDown\") {\n                                let duration = Number.parseInt(targetElement.getAttribute(\"slideDuration\"));\n                                let slideDisplay = targetElement.getAttribute(\"slideDisplay\");\n                                targetElement.slideDown(duration, slideDisplay);\n                            } else if (thisResponseType === \"fadeIn\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                let fadeDisplay = targetElement.getAttribute(\"fadeDisplay\");\n                                fadeDisplay = fadeDisplay !== undefined ? fadeDisplay : \"block\";\n                                targetElement.fadeIn(fadeDuration, fadeDisplay);\n                            } else if (thisResponseType === \"fadeOut\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                targetElement.fadeIn(fadeDuration);\n                            }\n                        }\n                        // this response2 function\n                        function responseThisTwo(targetElement) {\n                            var thisResponseType2 = targetElement.getAttribute(\"thisResponseType2\");\n                            if (thisResponseType2 === \"animating\") {\n                                var thisAnimationFrom2 = targetElement.getAttribute(\"thisAnimationFrom2\");\n                                var thisAnimationTo2 = targetElement.getAttribute(\"thisAnimationTo2\");\n                                var thisAnimationOptions2 = targetElement.getAttribute(\"thisAnimationOptions2\");\n                                var ObjOptions = {};\n                                var animationOptionsArr = animationOptions2.split(\",\");\n                                animationOptionsArr.forEach(function (option) {\n                                    var splitedOption = option.split(\":\");\n                                    ObjOptions[splitedOption[0]] = splitedOption[1];\n                                });\n                                if (ObjOptions.duration) {\n                                    ObjOptions.duration = Number.parseInt(ObjOptions.duration);\n                                }\n                                var fromArray = animationFrom2.split(\",\");\n                                var toArray = animationTo2.split(\",\");\n                                var ObjectFrom = {};\n                                var ObjectTo = {};\n                                fromArray.forEach(function (fromAn, i) {\n                                    var splitedFrom = fromAn.split(\":\");\n                                    var splitedTo = toArray[i].split(\":\");\n                                    ObjectFrom[splitedFrom[0]] = splitedFrom[1];\n                                    ObjectTo[splitedTo[0]] = splitedTo[1];\n                                });\n\n                                targetElement.animating([ObjectFrom, ObjectTo], ObjOptions);\n                            } else if (thisResponseType2 === \"display\") {\n                                var thisDisplay12 = targetElement.getAttribute(\"thisDisplay2\");\n                                targetElement.style.display = thisDisplay2;\n                            } else if (thisResponseType2 === \"cssStyle\") {\n                                var css2 = targetElement.getAttribute(\"thisCss2\");\n                                targetElement.style.cssText += css2;\n                            } else if (thisResponseType2 === \"slideUp\") {\n                                let slideUpDuration = Number.parseInt(targetElement.getAttribute(\"slideUpDuration\"));\n                                targetElement.slidingUp(slideUpDuration);\n                            } else if (thisResponseType2 === \"slideDown\") {\n                                let duration = Number.parseInt(targetElement.getAttribute(\"slideDuration\"));\n                                let slideDisplay = targetElement.getAttribute(\"slideDisplay\");\n                                targetElement.slideDown(duration, slideDisplay);\n                            } else if (thisResponseType2 === \"fadeIn\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                let fadeDisplay = targetElement.getAttribute(\"fadeDisplay\");\n                                fadeDisplay = fadeDisplay !== undefined ? fadeDisplay : \"block\";\n                                targetElement.fadeIn(fadeDuration, fadeDisplay);\n                            } else if (thisResponseType2 === \"fadeOut\") {\n                                let fadeDuration = Number.parseInt(targetElement.getAttribute(\"fadeDuration\"));\n                                targetElement.fadeIn(fadeDuration);\n                            }\n                        }\n                        // listen for\n                        // make event listener for this event\n                        if (thisEvent === \"true\") {\n                            let events = 0;\n                            if (thisEventType === \"click\" && thisEventType2 === \"click\") {\n                                controller.addEvent(`${thisEventType}`, function (e) {\n                                    events++;\n                                    if (events === 1) {\n                                        responseThisOne(e.target);\n                                    }\n                                    if (events === 2) {\n                                        responseThisTwo(e.target);\n                                        events = 0;\n                                    }\n                                });\n                            } else {\n                                controller.addEvent(`${thisEventType}`, function (e) {\n                                    responseThisOne(e.target);\n                                    controller.addEvent(`${thisEventType2}`, function (e) {\n                                        responseThisTwo(e.target);\n                                    });\n                                });\n                            }\n                        }\n                        //  check if the event type is click\n                        if (eventType === \"click\" && eventType2 === \"click\") {\n                            controller.addEvent(`${eventType}`, function (e) {\n                                clicked++;\n                                targetElements.forEach(function (targetElement) {\n                                    if (clicked === 1) {\n                                        return responseOne(targetElement);\n                                    }\n                                });\n                            });\n                            targetElements.forEach(function (targetElement, i) {\n                                let clickClose = targetElement.getAttribute(\"clickClose\");\n                                if (clickClose === \"true\") {\n                                    document.addEventListener(\"click\", function (e) {\n                                        if (clicked === 1) {\n                                            if (e.target === controller) {\n                                                return null;\n                                            } else if (e.target === targetElement) {\n                                                return null;\n                                            } else if (e.target.parents(targetElement) !== undefined) {\n                                                return null;\n                                            } else {\n                                                controller.click();\n                                                clicked = 0;\n                                            }\n                                        }\n                                    });\n                                }\n                            });\n                            if (eventType2 !== undefined) {\n                                controller.addEvent(`${eventType2}`, function (e) {\n                                    responseThisOne(e.target);\n                                    if (clicked === 2) {\n                                        targetElements.forEach(function (targetElement) {\n                                            responseTwo(targetElement);\n                                            clicked = 0;\n                                        });\n                                    }\n                                });\n                            }\n                        } else {\n                            controller.addEvent(`${eventType}`, function (e) {\n                                clicked++;\n                                targetElements.forEach(function (targetElement) {\n                                    responseOne(targetElement);\n                                });\n                                if (eventType2 !== undefined) {\n                                    if (eventType2 !== \"mouseleave\" || \"mouseout\") {\n                                        document.body.addEvent(\"mousemove\", function (bEvent) {\n                                            if (clicked === 0) {\n                                                return null;\n                                            } else {\n                                                if (notElement) {\n                                                    if (bEvent.target === controller || bEvent.target === notElement || bEvent.target.parents(notElement) !== undefined) {\n                                                        return null;\n                                                    } else {\n                                                        targetElements.forEach(function (targetElement) {\n                                                            responseTwo(targetElement);\n                                                            clicked = 0;\n                                                        });\n                                                    }\n                                                } else {\n                                                    if (bEvent.target !== controller) {\n                                                        targetElements.forEach(function (targetElement) {\n                                                            responseTwo(targetElement);\n                                                            clicked = 0;\n                                                        });\n                                                    }\n                                                }\n                                            }\n                                        });\n                                    } else {\n                                        controller.addEvent(`${eventType2}`, function (e) {\n                                            targetElements.forEach(function (targetElement) {\n                                                responseTwo(targetElement);\n                                                clicked = 0;\n                                            });\n                                        });\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n            })();\n            // end function to auto working for manipulating easy component events\n\n            if (finish) {\n                //function to access on the elements inside component with its expName attribute\n                (function () {\n                    var allElements = component.self.querySelectorAll(\"*\");\n                    var elem = elements.element.querySelectorAll(`[expName]`);\n                    allElements.forEach(function (el, i) {\n                        // component[el.getAttribute(\"expName\")] = el;\n                        if (el.getAttribute(\"expName\")) {\n                            if (el.getAttribute(\"expName\") === el.getAttribute(\"expName\")) {\n                                var arr = [];\n                                elem.forEach(function (it, x) {\n                                    if (it.getAttribute(\"expName\") === el.getAttribute(\"expName\")) {\n                                        var attr = el.getAttribute(\"expName\");\n                                        arr.push(it);\n                                        if (arr.length === 1) {\n                                            component[attr] = arr[0];\n                                        } else if (arr.length > 1) {\n                                            component[attr] = arr;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                })();\n                //function to append elements to element\n                component.append = function (elem, content) {\n                    if (typeof content === \"object\") {\n                        return elem.appendChild(content);\n                    }\n                    if (typeof content === \"string\") ;\n                    return elem.insertAdjacentHTML(\"beforeend\", content);\n                };\n                if (typeof parent === \"string\") {\n                    loadCssFile().then(function (style) {\n                        return setTimeout(function () {\n                            if (renderOption === true) {\n                                if (options.onload && options.whileLoading) {\n                                    options.onload(parent);\n                                    setTimeout(() => {\n                                        try {\n                                            document.querySelector(parent).appendChild(elements.element);\n                                        } catch (e) {\n                                            return true;\n                                        }\n                                        if (document.querySelector(parent).hasChildNodes(elements.element)) {\n                                            elements.element.insertBefore(style, elements.element.children[0]);\n                                        }\n                                        return finish(component);\n                                    }, 10);\n                                } else {\n                                    document.querySelector(parent).appendChild(elements.element);try {\n                                        document.querySelector(parent).appendChild(elements.element);\n                                    } catch (e) {\n                                        return true;\n                                    }\n                                    if (document.querySelector(parent).hasChildNodes(elements.element)) {\n                                        elements.element.insertBefore(style, elements.element.children[0]);\n                                    }\n                                    return finish(component);\n                                }\n                            } else if (renderOption === false || renderOption === undefined) {\n                                elements.element.insertBefore(style, elements.element.children[0]);\n                                return component;\n                            }\n                        }, 30);\n                    }).catch(function () {\n                        if (renderOption === true) {\n                            if (options.whileLoading && options.onload) {\n                                options.onload(parent);\n                                setTimeout(() => {\n                                    if (document.querySelector(parent)) {\n                                        try {\n                                            document.querySelector(parent).appendChild(elements.element);\n                                        } catch (e) {\n                                            return true;\n                                        }\n                                        return finish(component);\n                                    }\n                                }, 10);\n                            } else {\n                                if (document.querySelector(parent)) {\n                                    try {\n                                        document.querySelector(parent).appendChild(elements.element);\n                                    } catch (e) {\n                                        return true;\n                                    }\n                                    return finish(component);\n                                }\n                            }\n                        } else if (renderOption === false || renderOption === undefined) {\n                            return component;\n                        }\n                    });\n                } else if (typeof parent === \"object\") {\n                    loadCssFile().then(function (style) {\n                        return setTimeout(function () {\n                            if (renderOption === true) {\n                                if (options.whileLoading && options.onload) {\n                                    options.onload(parent);\n                                    setTimeout(() => {\n                                        try {\n                                            parent.appendChild(elements.element);\n                                        } catch (e) {\n                                            return true;\n                                        }\n                                        if (parent.hasChildNodes(elements.element)) {\n                                            elements.element.insertBefore(style, elements.element.children[0]);\n                                        }\n                                        return finish(component);\n                                    }, 10);\n                                } else {\n                                    try {\n                                        parent.appendChild(elements.element);\n                                    } catch (e) {\n                                        return true;\n                                    }\n                                    if (parent.hasChildNodes(elements.element)) {\n                                        elements.element.insertBefore(style, elements.element.children[0]);\n                                    }\n                                    return finish(component);\n                                }\n                            } else if (renderOption === false || renderOption === undefined) {\n                                elements.element.insertBefore(style, elements.element.children[0]);\n                                return component;\n                            }\n                        }, 30);\n                    }).catch(function () {\n                        if (renderOption === true) {\n                            if (options.whileLoading && options.onload) {\n                                options.onload(parent);\n                                setTimeout(() => {\n                                    try {\n                                        parent.appendChild(elements.element);\n                                    } catch (e) {\n                                        return true;\n                                    }\n                                    return finish(component);\n                                }, 10);\n                            } else {\n                                try {\n                                    parent.appendChild(elements.element);\n                                } catch (e) {\n                                    return true;\n                                }\n                                return finish(component);\n                            }\n                        } else if (renderOption === false || renderOption === undefined) {\n                            return component;\n                        }\n                    });\n                }\n            } else {\n                (function () {\n                    var allElements = component.self.querySelectorAll(\"*\");\n                    var elem = elements.element.querySelectorAll(`[expName]`);\n                    allElements.forEach(function (el, i) {\n                        // component[el.getAttribute(\"expName\")] = el;\n                        if (el.getAttribute(\"expName\")) {\n                            if (el.getAttribute(\"expName\") === el.getAttribute(\"expName\")) {\n                                var arr = [];\n                                elem.forEach(function (it, x) {\n                                    if (it.getAttribute(\"expName\") === el.getAttribute(\"expName\")) {\n                                        var attr = el.getAttribute(\"expName\");\n                                        arr.push(it);\n                                        if (arr.length === 1) {\n                                            component[attr] = arr[0];\n                                        } else if (arr.length > 1) {\n                                            component[attr] = arr;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                })();\n                //function to append elements to element\n                component.append = function (elem, content) {\n                    if (typeof content === \"object\") {\n                        return elem.appendChild(content);\n                    }\n                    if (typeof content === \"string\") ;\n                    return elem.insertAdjacentHTML(\"beforeend\", content);\n                };\n                if (typeof parent === \"string\") {\n                    loadCssFile().then(function (style) {\n                        return setTimeout(function () {\n                            if (renderOption === true) {\n                                if (options.whileLoading && options.onload) {\n                                    options.onload(parent);\n                                    setTimeout(() => {\n                                        document.querySelector(parent).appendChild(elements.element);\n                                        if (document.querySelector(parent).hasChildNodes(elements.element)) {\n                                            elements.element.insertBefore(style, elements.element.children[0]);\n                                        }\n                                    }, 10);\n                                } else {\n                                    document.querySelector(parent).appendChild(elements.element);\n                                    if (document.querySelector(parent).hasChildNodes(elements.element)) {\n                                        elements.element.insertBefore(style, elements.element.children[0]);\n                                    }\n                                }\n                            } else if (renderOption === false || renderOption === undefined) {\n                                elements.element.insertBefore(style, elements.element.children[0]);\n                                return component;\n                            }\n                        }, 30);\n                    }).catch(function () {\n                        if (renderOption === true) {\n                            if (options.whileLoading && options.onload) {\n                                options.onload(parent);\n                                setTimeout(() => {\n                                    return document.querySelector(parent).appendChild(elements.element);\n                                }, 10);\n                            } else {\n                                return document.querySelector(parent).appendChild(elements.element);\n                            }\n                        } else if (renderOption === false || renderOption === undefined) {\n                            return component;\n                        }\n                    });\n                } else if (typeof parent === \"object\") {\n                    loadCssFile().then(function () {\n                        return setTimeout(function () {\n                            if (renderOption === true) {\n                                if (options.whileLoading && options.onload) {\n                                    options.onload(parent);\n                                    setTimeout(() => {\n                                        parent.appendChild(elements.element);\n                                        if (parent.hasChildNodes(elements.element)) {\n                                            elements.element.insertBefore(style, elements.element.children[0]);\n                                        }\n                                    }, 10);\n                                } else {\n                                    parent.appendChild(elements.element);\n                                    if (parent.hasChildNodes(elements.element)) {\n                                        elements.element.insertBefore(style, elements.element.children[0]);\n                                    }\n                                }\n                            } else if (renderOption === false || renderOption === undefined) {\n                                elements.element.insertBefore(style, elements.element.children[0]);\n                                return component;\n                            }\n                        }, 30);\n                    }).catch(function () {\n                        if (renderOption === true) {\n                            if (options.whileLoading && options.onload) {\n                                options.onload(parent);\n                                setTimeout(() => {\n                                    return parent.appendChild(elements.element);\n                                }, 10);\n                            } else {\n                                return parent.appendChild(elements.element);\n                            }\n                        } else if (renderOption === false || renderOption === undefined) {\n                            return component;\n                        }\n                    });\n                }\n            }\n            return component;\n        }\n        if (options && options.get) {\n            dataArr = [];\n            if (options.render === true) {\n                if (options.get) {\n                    if (options.get.fetch === true) {\n                        self.http.get(options.get, function (err, response) {\n                            var ajax = {};\n                            if (err) {\n                                ajax.error = err;\n                            }\n                            if (response) {\n                                ajax.data = response.data;\n                            }\n                            if (options.get.callback) {\n                                options.get.callback(err, response);\n                            }\n                            if (options.data) {\n                                allData = options.data;\n                            } else {\n                                allData = {};\n                            }\n                            allData.ajax = ajax;\n                            return writeIt(allData);\n                        });\n                    } else {\n                        function getPromise() {\n                            new Promise(function (resolve, reject) {\n                                self.http.get({\n                                    url: options.get.url,\n                                    headers: options.get.headers,\n                                    credentials: options.get.credentials,\n                                    origin: options.get.origin,\n                                    onProgress: function (xhttp) {\n                                        da = Date.now();\n                                        if (options.get.onProgress) {\n                                            options.get.onProgress(xhttp);\n                                        }\n                                    },\n                                    onStart: function (xhttp) {\n                                        if (options.get.onStart) {\n                                            options.get.onStart(xhttp);\n                                        }\n                                    }\n                                }, function (err, data) {\n                                    ajax = {};\n                                    if (err) {\n                                        ajax.error = err;\n                                        resolve(ajax);\n                                    }\n                                    if (data) {\n                                        ajax.data = data;\n                                        resolve(ajax);\n                                    }\n                                    if (options.get.callback) {\n                                        return options.get.callback(err, data);\n                                    }\n                                });\n                            });\n                        }\n                        return getPromise().then(function (resolve) {\n                            if (options && options.data) {\n                                allData = options.data;\n                            }\n                            allData.ajax = resolve;\n                            return writeIt(allData);\n                        });\n                    }\n                }\n            } else {\n                if (options.data) {\n                    return writeIt(options.data);\n                } else {\n                    return writeIt();\n                }\n            }\n        } else {\n            if (options && options.data) {\n                allData = options.data;\n                return writeIt(allData);\n            } else {\n                return writeIt();\n            }\n        }\n    };\n    this.useComponent = function (component, parent) {\n        var newComponent = component;\n        parent = parent || component.options.parent;\n        var componentParent = newComponent.options.parent || parent;\n        newComponent.options.render = true;\n        newComponent.options.parent = typeof parent === \"string\" ? document.querySelector(componentParent) : componentParent;\n        newComponent.parent = newComponent.options.parent;\n        active.renderComponent(newComponent.cb, newComponent.options, newComponent.finish);\n    };\n    // end function to render a new component\n\n    // function to use to start the application\n    this.intiApplication = function () {\n        var headerApp = document.createElement(\"header-app\");\n        var contentPages = document.createElement(\"content-app\");\n        var sideBar = document.createElement(\"side-app\");\n        var footerApp = document.createElement(\"footer-app\");\n        document.body.insertBefore(headerApp, document.querySelector(\"script\"));\n        document.body.insertBefore(contentPages, document.querySelector(\"script\"));\n        document.body.insertBefore(sideBar, document.querySelector(\"script\"));\n        document.body.insertBefore(footerApp, document.querySelector(\"script\"));\n    };\n    // end function to use to start the application\n\n    // function to load static component to still showing it in all pages as you want\n\n    this.loadStaticComponents = function (cb) {\n        return cb();\n    };\n\n    // end function to load static component to still showing it in all pages as you want\n\n    // function to parse the data\n\n    this.parseData = function (data, cb) {\n        if (typeof data === \"string\") {\n            data = JSON.parse(data);\n        }\n        if (Array.isArray(data)) {\n            data.map(function (item, i) {\n                return cb(item, i);\n            });\n        }\n        if (typeof data === \"object\") {\n            Object.keys(data).map(function (item, i) {\n                return cb(data[item], data[i]);\n            });\n        }\n    };\n\n    // end function to parse the data\n\n    // using the router module for routing process\n    this.Router = _router__WEBPACK_IMPORTED_MODULE_0__[\"Router\"];\n    //end using the router module for routing process\n\n    // http module and ajax\n    function Ajax() {\n        var xhr = new XMLHttpRequest();\n        this.get = function (options, cb) {\n            if (options.fetch === true) {\n                var resArr = [];\n                var err,\n                    response = {};\n                return fetch(options.url, options).then(function (res) {\n                    response.res = res;\n                    return res.json();\n                }).then(function (data) {\n                    response.data = data;\n                    resArr.push(response);\n                    return cb(err, response);\n                }).catch(function (error) {\n                    err = error;\n                    resArr.push({ err: err });\n                    return cb(err, response);\n                }).then(function (component) {\n                    return component;\n                });\n            } else {\n                xhr.open(\"get\", options.url, options.async ? options.async : true);\n                if (options.type) {\n                    this.responseType = options.type;\n                }\n                if (options.headers) {\n                    Object.keys(options.headers).forEach(function (index) {\n                        xhr.setRequestHeader(index, options.headers[index]);\n                    });\n                }\n                xhr.onreadystatechange = function () {\n                    if (this.readyState === 0) {\n                        if (options.beforStart) {\n                            options.beforStart();\n                        }\n                    }\n                    if (this.readyState === 1) {\n                        if (options.onStart) {\n                            options.onStart(xhr);\n                        }\n                    }\n                    if (this.readyState === 3) {\n                        if (options.onProgress) {\n                            options.onProgress(xhr);\n                        }\n                    }\n                    var err;\n                    var data;\n                    if (this.readyState === 4) {\n                        if (this.status === 404 || this.status === 403 || this.status === 500) {\n                            err = { status: this.status };\n                        }\n                        if (this.readyState === 4 && this.status === 200) {\n                            data = { response: this.response, responseText: this.responseText, responseUrl: this.responseURL, responseXML: this.responseXML, responseType: this.responseType };\n                        }\n                        return cb(err, data);\n                    }\n                };\n                xhr.send();\n            }\n        };\n        this.post = function (options, cb) {\n            if (options.fetch === true) {\n                var response = {};\n                options.method = options.method !== undefined && options.method.toLowerCase() === \"post\" ? options.method : \"post\";\n                fetch(options.url, options).then(function (res) {\n                    response.res = res;\n                    return res.json();\n                }).then(function (data) {\n                    response.data = data;\n                    return cb(false, response);\n                }).catch(function (err) {\n                    return cb(err, false);\n                });\n            } else if (options.fetch === false || options.fetch === undefined) {\n                if (options.fetch !== undefined) {\n                    delete options.fetch;\n                }\n                var err;\n                var data;\n                var formData = new FormData();\n                if (options.url) {\n                    xhr.open(\"post\", options.url, options.async ? options.async : true);\n                    if (options.headers) {\n                        Object.keys(options.headers).forEach(function (index) {\n                            xhr.setRequestHeader(index, options.headers[index]);\n                        });\n                    }\n                    if (options.fullAjax) {\n                        return fullAjax(this);\n                    }\n                    if (options.data) {\n                        if (options.upload) {\n                            var file;\n                            file = options.upload.file;\n                            Array.from(file).forEach(function (fil) {\n                                formData.append(options.upload.fileName, fil);\n                            });\n                            if (options.upload.onload) {\n                                xhr.upload.onload = function (e) {\n                                    return options.upload.onload(e);\n                                };\n                            }\n                            if (options.upload.onprogress) {\n                                xhr.upload.onprogress = function (e) {\n                                    return options.upload.onprogress(e);\n                                };\n                            }\n                            if (options.upload.onerror) {\n                                xhr.upload.onerror = function (e) {\n                                    return options.upload.onerror(e);\n                                };\n                            }\n                        }\n                        if (typeof options.data === \"object\") {\n                            if (options.headers[\"content-type\"] === \"application/json\") {\n                                options.data = JSON.stringify(options.data);\n                            } else {\n                                Object.keys(options.data).forEach(function (item) {\n                                    formData.append(item, options.data[item]);\n                                });\n                                options.data = formData;\n                            }\n                        } else if (typeof options.data === \"string\") {\n                            xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n                        }\n                        xhr.setRequestHeader(\"ajax\", \"active\");\n                        if (options.onabort) {\n                            xhr.onabort = function (e) {\n                                return options.onabort(e);\n                            };\n                        }\n                        xhr.onreadystatechange = function () {\n                            if (this.readyState === 0) {\n                                if (options.beforStart) {\n                                    options.beforStart();\n                                }\n                            }\n                            if (this.readyState === 1) {\n                                if (options.onStart) {\n                                    options.onStart();\n                                }\n                            }\n                            if (this.readyState === 3) {\n                                if (options.onProgress) {\n                                    options.onProgress();\n                                }\n                            }\n\n                            if (this.status === 404 || this.status === 403 || this.status === 500) {\n                                err = { status: this.status };\n                            }\n                            if (this.readyState === 4 && this.status === 200) {\n                                data = { response: this.response, responseText: this.responseText, responseUrl: this.responseURL, responseXML: this.responseXML, responseType: this.responseType };\n                            }\n                            if (cb) {\n                                return cb(err, data);\n                            }\n                        };\n                        xhr.send(options.data);\n                    } else {\n                        err = new Error(\"bad request\");\n                        return console.error(\"cannot send empty data\");\n                    }\n                } else {\n                    err = new Error(\"bad request\");\n                    return console.error(\"cannot send empty url\");\n                }\n            }\n        };\n    }\n    // end http module and ajax\n    // using the http module and ajax\n    this.http = new Ajax();\n    // end using the http module and ajax\n    // function to maek popstate\n}\n\n\n\n//# sourceURL=webpack:///./adminPublic/javascripts/lib/active.js?");

/***/ }),

/***/ "./adminPublic/javascripts/lib/router.js":
/*!***********************************************!*\
  !*** ./adminPublic/javascripts/lib/router.js ***!
  \***********************************************/
/*! exports provided: Router */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return Router; });\n\nvar query = {};\nwindow.location.search.substring(1).split('&').forEach(function (pair) {\n    pair = pair.split('=');\n    if (pair[1] !== undefined) {\n        var key = decodeURIComponent(pair[0]),\n            val = decodeURIComponent(pair[1]),\n            val = val ? val.replace(/\\++/g, ' ').trim() : '';\n        if (key.length === 0) {\n            return;\n        }\n        if (query[key] === undefined) {\n            query[key] = val;\n        } else {\n            if (\"function\" !== typeof query[key].push) {\n                query[key] = [query[key]];\n            }\n            query[key].push(val);\n        }\n    }\n});\n\nclass Router {\n    // define some settings of class\n    constructor() {\n        this.request = {};\n        this.request.location = window.location;\n        this.response = {};\n        this.response.render = function (status, path, parent, name, cb) {\n            express.render(status, path, parent, name, cb);\n        };\n        this.response.renderComponent = function (cb, parent, style, scripts) {\n            express.renderComponent(cb, parent, style, scripts);\n        };\n        this.response.filterContent = function (element, options, cb) {\n            express.filterContent(element, options, cb);\n        };\n        this.response.redirect = function (url) {\n            location.replace(url);\n        };\n        this.getRoutes = {};\n        this.postRoutes = {};\n        this.putRoutes = {};\n        this.deleteRoutes = {};\n        this.MainPathName = location.pathname;\n        this.useRoutes = {};\n    }\n    getRoute(options) {\n        var request = this.request;\n        request.query = query;\n        var response = this.response;\n        options.method = \"get\";\n        let MainPathName = this.MainPathName;\n        let errorPage = this.errorPage;\n        let url = options.url;\n        let handler = options.handler;\n        let title = options.title;\n        let getRoutes = this.getRoutes;\n        getRoutes[url] = options;\n        document.addEventListener(\"click\", e => {\n            if (e.detail === 1) {\n                var routers = document.querySelectorAll(\"[router]\");\n                let clickedRouter = Array.from(routers).find(router => e.target === router);\n                if (clickedRouter) {\n                    e.preventDefault();\n                    var routerVal = clickedRouter.getAttribute(\"router\");\n                    // check if the pathname of it equals the current pathname\n                    if (getRoutes[routerVal] !== undefined) {\n                        if (routerVal.split(\"#\")[0] === url.split(\"#\")[0]) {\n                            let middlewares = getRoutes[routerVal].middlewares;\n                            if (middlewares && middlewares.length > 0) {\n                                var nexted = 0;\n                                middlewares[0](request, response, next);\n                                function next() {\n                                    nexted++;\n                                    if (middlewares.length <= nexted) {\n                                        history.pushState({\n                                            url: routerVal,\n                                            title: title,\n                                            callback: getRoutes[routerVal].handler.toString()\n                                        }, title, routerVal);\n                                        return getRoutes[routerVal].handler(request, response);\n                                    } else {\n                                        return middlewares[nexted](request, response, next);\n                                    }\n                                }\n                            } else {\n                                history.pushState({\n                                    url: routerVal,\n                                    title: title,\n                                    callback: getRoutes[routerVal].handler.toString()\n                                }, title, routerVal);\n                                getRoutes[routerVal].handler(request, response);\n                            }\n                        }\n                    } else {\n                        return errorPage();\n                    }\n                }\n            }\n        });\n        if (getRoutes[MainPathName] !== undefined) {\n            if (MainPathName === url) {\n                let middlewares = getRoutes[MainPathName].middlewares;\n                if (middlewares && middlewares.length > 0) {\n                    var nexted = 0;\n                    function next() {\n                        nexted++;\n                        if (middlewares.length <= nexted) {\n                            history.pushState({\n                                url: MainPathName,\n                                title: title,\n                                callback: handler.toString()\n                            }, title, MainPathName);\n                            return getRoutes[MainPathName].handler(request, response);\n                        } else {\n                            return middlewares[nexted](request, response, next);\n                        }\n                    }\n                    middlewares[0](request, response, next);\n                } else {\n                    history.pushState({\n                        url: MainPathName,\n                        title: title,\n                        callback: handler.toString()\n                    }, title, MainPathName);\n                    return getRoutes[MainPathName].handler(request, response);\n                }\n            }\n        } else {\n            return errorPage();\n        }\n    }\n    popState() {\n        var pathname = location.pathname;\n        var getRoutes = this.getRoutes;\n        var request = this.request;\n        var response = this.response;\n        window.addEventListener(\"popstate\", function (event) {\n            if (event.state !== null) {\n                if (getRoutes[event.state.url] !== undefined) {\n                    if (event.state.title) {\n                        document.querySelector(\"title\").innerHTML = event.state.title;\n                    }\n                    let middlewares = getRoutes[event.state.url].middlewares;\n                    if (middlewares && middlewares.length > 0) {\n                        var nexted = 0;\n                        middlewares[0](request, response, next);\n                        function next() {\n                            nexted++;\n                            if (middlewares.length <= nexted) {\n                                return getRoutes[event.state.url].handler(request, response);\n                            } else {\n                                return middlewares[nexted](request, response, next);\n                            }\n                        }\n                    } else {\n                        return getRoutes[event.state.url].handler(request, response);\n                    }\n                }\n            }\n        });\n    }\n    postRoute(options) {\n        let url = options.url;\n        let postRoutes = this.postRoutes;\n        postRoutes[url] = options;\n        let request = this.request;\n        let response = this.response;\n        request.checks = {};\n        let checks = request.checks;\n        document.addEventListener(\"submit\", function (e) {\n            if (e.target.getAttribute(\"clientPosting\") === \"true\") {\n                e.preventDefault();\n                var body = {};\n                body.form = e.target;\n                request.action = body.form.action;\n                var inputs = body.form.querySelectorAll(\"input\");\n                var textarea = body.form.querySelectorAll(\"textarea\");\n                inputs.forEach(function (input, i) {\n                    var name = input.getAttribute(\"name\");\n                    if (textarea.length > 0) {\n                        var textareaName = textarea[i].getAttribute(\"name\");\n                    }\n                    body[name] = input;\n                    body[textareaName] = textarea[i];\n                });\n                // add validation to the form\n                checks.checkEmpty = function (element, cb) {\n                    elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n                    if (elementVal === \"\") {\n                        if (!cb) {\n                            return true;\n                        }\n                        if (cb) {\n                            var empty = true;\n                            return cb(empty);\n                        }\n                    } else {\n                        if (cb) {\n                            var empty = false;\n                            return cb(empty);\n                        } else {\n                            return false;\n                        }\n                    }\n                };\n                checks.checkEmail = function (element, cb) {\n                    var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n                    var regEx = new RegExp(\"@\", \"gi\");\n                    if (elementVal !== \"\") {\n                        if (cb) {\n                            var test = regEx.test(elementVal);\n                            return cb(test);\n                        } else {\n                            return regEx.test(elementVal);\n                        }\n                    }\n                };\n                // function to check if it is number\n                checks.checkIsNumber = function (element, cb) {\n                    var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n                    if (elementVal !== \"\") {\n                        var testNumber = Number.isInteger(Number(elementVal));\n                        if (cb) {\n                            return cb(testNumber);\n                        } else {\n                            return testNumber;\n                        }\n                    }\n                };\n\n                // function to check if contains a number\n                checks.checkContainsNumber = function (element, count, cb) {\n                    var elementVal = typeof element === \"object\" ? element.value : typeof element === \"string\" ? element : \"\";\n                    if (typeof count === \"function\" && !cb) {\n                        cb = count;\n                    }\n                    count = typeof count === \"number\" ? count : 1;\n                    var numArr = [];\n                    if (elementVal !== \"\") {\n                        Array.from(elementVal).forEach(function (letter) {\n                            if (Number.isInteger(Number(letter))) {\n                                numArr.push(letter);\n                            }\n                        });\n                        if (numArr.length === count) {\n                            let result = true;\n                            if (cb) {\n                                return cb(result);\n                            } else {\n                                return result;\n                            }\n                        } else {\n                            let result = false;\n                            if (cb) {\n                                return cb(result);\n                            } else {\n                                return result;\n                            }\n                        }\n                    }\n                };\n                var act = new RegExp(location.origin, \"gi\");\n                act = act.exec(request.action);\n                var action = request.action.replace(act, \"\");\n                if (action === url) {\n                    request.body = body;\n                    request.action = action;\n                    let middlewares = postRoutes[action].middlewares;\n                    if (middlewares && middlewares.length > 0) {\n                        var nexted = 0;\n                        middlewares[0](request, response, next);\n                        function next() {\n                            nexted++;\n                            if (middlewares.length <= nexted) {\n                                return postRoutes[action].handler(request, response);\n                            } else {\n                                return middlewares[nexted](request, response, next);\n                            }\n                        }\n                    } else {\n                        return postRoutes[action].handler(request, response);\n                    }\n                }\n            }\n        });\n    }\n    redirect(url) {\n        location.replace(url);\n    }\n    errorPage(cb) {\n        if (this) {\n            let useRoutes = this.useRoutes;\n            let getRoutes = this.getRoutes;\n            let MainPathName = location.pathname;\n            var usedUrl = Object.keys(useRoutes).find(key => MainPathName.indexOf(key) !== -1);\n            var checker = setInterval(() => {\n                if (document.readyState == \"complete\") {\n                    clearTimeout(checker);\n                    if (usedUrl) {\n                        return true;\n                    } else if (getRoutes[MainPathName] !== undefined) {\n                        return true;\n                    } else {\n                        if (cb) {\n                            return cb();\n                        }\n                    }\n                }\n            }, 10);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./adminPublic/javascripts/lib/router.js?");

/***/ }),

/***/ "./adminPublic/javascripts/routers/admin.js":
/*!**************************************************!*\
  !*** ./adminPublic/javascripts/routers/admin.js ***!
  \**************************************************/
/*! exports provided: adminRouters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adminRouters\", function() { return adminRouters; });\n/* harmony import */ var _src_behind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/behind */ \"./adminPublic/javascripts/src/behind.js\");\n/* harmony import */ var _controllers_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/index */ \"./adminPublic/javascripts/controllers/index.js\");\n\n\nconst adminRouters = () => {\n    _src_behind__WEBPACK_IMPORTED_MODULE_0__[\"Router\"].getRoute({\n        url: \"/\",\n        handler: (req, res) => {\n            Object(_controllers_index__WEBPACK_IMPORTED_MODULE_1__[\"renderHomePage\"])(req, res);\n        }\n    });\n    _src_behind__WEBPACK_IMPORTED_MODULE_0__[\"Router\"].getRoute({\n        url: \"/orders\",\n        handler: (req, res) => {\n            Object(_controllers_index__WEBPACK_IMPORTED_MODULE_1__[\"renderOrdersPage\"])(req, res);\n        }\n    });\n    _src_behind__WEBPACK_IMPORTED_MODULE_0__[\"Router\"].getRoute({\n        url: \"/products\",\n        handler: (req, res) => {\n            Object(_controllers_index__WEBPACK_IMPORTED_MODULE_1__[\"renderMainProductsPage\"])(req, res);\n        }\n    });\n};\n\n\n//# sourceURL=webpack:///./adminPublic/javascripts/routers/admin.js?");

/***/ }),

/***/ "./adminPublic/javascripts/src/app.js":
/*!********************************************!*\
  !*** ./adminPublic/javascripts/src/app.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _behind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./behind */ \"./adminPublic/javascripts/src/behind.js\");\n/* harmony import */ var _routers_admin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../routers/admin */ \"./adminPublic/javascripts/routers/admin.js\");\n\nwindow.active = _behind__WEBPACK_IMPORTED_MODULE_0__[\"active\"];\n\n\n// active.loadStaticComponents(() => {\n//     active.render(false, \"/javascripts/view/partials/sidebar/view/sidebar.js\", \"dashboard-sidebar\");\n//     active.render(false, \"/javascripts/view/partials/header/view/header.js\", \"dashboard-header\");\n// });\n\n\n// // execute admin routers\n// adminRouters();\nconsole.log(\"dd\");\n\n//# sourceURL=webpack:///./adminPublic/javascripts/src/app.js?");

/***/ }),

/***/ "./adminPublic/javascripts/src/behind.js":
/*!***********************************************!*\
  !*** ./adminPublic/javascripts/src/behind.js ***!
  \***********************************************/
/*! exports provided: active, Router */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"active\", function() { return active; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return Router; });\n/* harmony import */ var _lib_active__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/active */ \"./adminPublic/javascripts/lib/active.js\");\n\nconst active = new _lib_active__WEBPACK_IMPORTED_MODULE_0__[\"Active\"]();\nconst Router = new active.Router();\n\n\n//# sourceURL=webpack:///./adminPublic/javascripts/src/behind.js?");

/***/ })

/******/ });